type Account @entity {
	asERC721: ERC721Contract
	ERC721tokens: [ERC721Token]! @derivedFrom(field: "owner")
	ERC721operatorOwner: [ERC721Operator]! @derivedFrom(field: "owner")
	ERC721operatorOperator: [ERC721Operator]! @derivedFrom(field: "operator")
	ERC721transferFromEvent: [ERC721Transfer]! @derivedFrom(field: "from")
	ERC721transferToEvent: [ERC721Transfer]! @derivedFrom(field: "to")
}
type ERC721Contract @entity {
	asAccount: Account!
	supportsMetadata: Boolean
	name: String
	symbol: String
	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
	operators: [ERC721Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}
type ERC721Token @entity {
	contract: ERC721Contract!
	identifier: BigInt!
	owner: Account!
	approval: Account!
	uri: String
	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
}
type ERC721Operator @entity {
	contract: ERC721Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}
type ERC721Transfer implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC721Contract!
	token: ERC721Token!
	from: Account!
	to: Account!
}
type DecimalValue @entity {
	id:                           ID!
	value:                        BigDecimal!
	exact:                        BigInt!
	decimals:                     Int!
}

interface Event {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
}

type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	events:                       [Event!]! @derivedFrom(field: "transaction")
}

type PersistentStringArray @entity {
	id:                           ID!
	values:                       [String!]!
}

type PersistentString @entity {
	id:                           ID!
	value:                        String!
}
