type Account @entity {
	asAccessControl: AccessControl
	membership: [AccessControlRoleMember!]! @derivedFrom(field: "account")
	roleGranted: [RoleGranted!]! @derivedFrom(field: "account")
	roleGrantedSender: [RoleGranted!]! @derivedFrom(field: "sender")
	roleRevoked: [RoleRevoked!]! @derivedFrom(field: "account")
	roleRevokedSender: [RoleRevoked!]! @derivedFrom(field: "sender")
	asERC1155: ERC1155Contract
	ERC1155balances: [ERC1155Balance!]! @derivedFrom(field: "account")
	ERC1155operatorOwner: [ERC1155Operator!]! @derivedFrom(field: "owner")
	ERC1155operatorOperator: [ERC1155Operator!]! @derivedFrom(field: "operator")
	ERC1155transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "from")
	ERC1155transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "to")
	ERC1155transferOperatorEvent: [ERC1155Transfer!]! @derivedFrom(field: "operator")
	asERC20: ERC20Contract
	ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
	ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
	ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
	ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
	ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
	asERC721: ERC721Contract
	ERC721tokens: [ERC721Token]! @derivedFrom(field: "owner")
	ERC721operatorOwner: [ERC721Operator]! @derivedFrom(field: "owner")
	ERC721operatorOperator: [ERC721Operator]! @derivedFrom(field: "operator")
	ERC721transferFromEvent: [ERC721Transfer]! @derivedFrom(field: "from")
	ERC721transferToEvent: [ERC721Transfer]! @derivedFrom(field: "to")
	asTimelockController: TimelockController
	timelockedCalls: [TimelockControllerCall!]! @derivedFrom(field: "target")
}
type AccessControl @entity {
	asAccount: Account!
	roles: [AccessControlRole!]! @derivedFrom(field: "contract")
}
type Role @entity {
	roleOf: [AccessControlRole!]! @derivedFrom(field: "role")
	adminOf: [AccessControlRole!]! @derivedFrom(field: "admin")
}
type AccessControlRole @entity {
	contract: AccessControl!
	role: Role!
	admin: Role
	members: [AccessControlRoleMember!]! @derivedFrom(field: "accesscontrolrole")
	roleGranted: [RoleGranted!]! @derivedFrom(field: "role")
	roleRevoked: [RoleRevoked!]! @derivedFrom(field: "role")
	roleAdminChanged: [RoleAdminChanged!]! @derivedFrom(field: "role")
}
type AccessControlRoleMember @entity {
	accesscontrolrole: AccessControlRole!
	account: Account!
}
type RoleAdminChanged implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	newAdminRole: Role!
	previousAdminRole: Role!
}
type RoleGranted implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	account: Account!
	sender: Account!
}
type RoleRevoked implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	account: Account!
	sender: Account!
}
type ERC1155Contract @entity {
	asAccount: Account!
	tokens: [ERC1155Token!]! @derivedFrom(field: "contract")
	balances: [ERC1155Balance!]! @derivedFrom(field: "contract")
	operators: [ERC1155Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC1155Transfer!]! @derivedFrom(field: "contract")
}
type ERC1155Token @entity {
	contract: ERC1155Contract!
	identifier: BigInt!
	uri: String
	totalSupply: DecimalValue!
	totalSupplyExact: BigInt!
	balances: [ERC1155Balance!]! @derivedFrom(field: "token")
	transfers: [ERC1155Transfer!]! @derivedFrom(field: "token")
}
type ERC1155Balance @entity {
	contract: ERC1155Contract!
	token: ERC1155Token!
	account: Account!
	value: DecimalValue!
	valueExact: BigInt!
	transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC1155Operator @entity {
	contract: ERC1155Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}
type ERC1155Transfer implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC1155Contract!
	token: ERC1155Token!
	operator: Account!
	from: Account!
	fromBalance: ERC1155Balance
	to: Account!
	toBalance: ERC1155Balance
	value: BigDecimal!
	valueExact: BigInt!
}
type ERC20Contract @entity {
	asAccount: Account!
	name: String
	symbol: String
	decimals: Int!
	balances: [ERC20Balance!]! @derivedFrom(field: "contract")
	approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
	transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}
type ERC20Balance @entity {
	contract: ERC20Contract!
	account: Account!
	value: DecimalValue!
	valueExact: BigInt!
	transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC20Approval @entity {
	contract: ERC20Contract!
	owner: Account!
	spender: Account!
	value: DecimalValue!
	valueExact: BigInt!
}
type ERC20Transfer implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC20Contract!
	from: Account!
	fromBalance: ERC20Balance
	to: Account!
	toBalance: ERC20Balance
	value: BigDecimal!
	valueExact: BigInt!
}
type ERC721Contract @entity {
	asAccount: Account!
	supportsMetadata: Boolean
	name: String
	symbol: String
	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
	operators: [ERC721Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}
type ERC721Token @entity {
	contract: ERC721Contract!
	identifier: BigInt!
	owner: Account!
	approval: Account!
	uri: String
	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
}
type ERC721Operator @entity {
	contract: ERC721Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}
type ERC721Transfer implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC721Contract!
	token: ERC721Token!
	from: Account!
	to: Account!
}
type TimelockController @entity {
	asAccount: Account
	operations: [TimelockControllerOperation!]! @derivedFrom(field: "contract")
	scheduled: [TimelockControllerOperationScheduled!]! @derivedFrom(field: "contract")
	executed: [TimelockControllerOperationExecuted!]! @derivedFrom(field: "contract")
	cancelled: [TimelockControllerOperationCancelled!]! @derivedFrom(field: "contract")
	mindelaychange: [TimelockControllerMinDelayChange!]! @derivedFrom(field: "contract")
}
enum TimelockControllerStatus {
  id: ID!
	SCHEDULED
	EXECUTED
	CANCELED
}
type TimelockControllerOperation @entity {
	contract: TimelockController!
	status: TimelockControllerStatus!
	delay: BigInt!
	timestamp: BigInt!
	predecessor: TimelockControllerOperation
	calls: [TimelockControllerCall!]! @derivedFrom(field: "operation")
	scheduled: [TimelockControllerOperationScheduled!]! @derivedFrom(field: "operation")
	executed: [TimelockControllerOperationExecuted!]! @derivedFrom(field: "operation")
	cancelled: [TimelockControllerOperationCancelled!]! @derivedFrom(field: "operation")
}
type TimelockControllerCall @entity {
	operation: TimelockControllerOperation!
	index: BigInt!
	target: Account!
	value: BigDecimal!
	data: Bytes!
	scheduled: [TimelockControllerOperationScheduled!]! @derivedFrom(field: "call")
	executed: [TimelockControllerOperationExecuted!]! @derivedFrom(field: "call")
}
type TimelockControllerOperationScheduled implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: TimelockController!
	operation: TimelockControllerOperation!
	call: TimelockControllerCall!
}
type TimelockControllerOperationExecuted implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: TimelockController!
	operation: TimelockControllerOperation!
	call: TimelockControllerCall!
}
type TimelockControllerOperationCancelled implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: TimelockController!
	operation: TimelockControllerOperation!
}
type TimelockControllerMinDelayChange implements Event @entity {
	transaction: Transaction!
	timestamp: BigInt!
	contract: TimelockController!
	delay: BigInt!
}
type DecimalValue @entity {
	id:                           ID!
	value:                        BigDecimal!
	exact:                        BigInt!
	decimals:                     Int!
}

interface Event {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
}

type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	events:                       [Event!]! @derivedFrom(field: "transaction")
}

type PersistentStringArray @entity {
	id:                           ID!
	values:                       [String!]!
}

type PersistentString @entity {
	id:                           ID!
	value:                        String!
}
